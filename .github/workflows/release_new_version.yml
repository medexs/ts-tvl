name: Release new version on tag creation
on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+'

jobs:
  check_tag_branch:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.check_tag_is_on_master.outputs.DO_RELEASE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0  # Ensure full history is available

      - name: Check tag is on master
        id: check_tag_is_on_master
        run: |
            TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
            if git branch -r --contains "$TAG_COMMIT" | grep -q "origin/master"; then
              echo "DO_RELEASE=true" >> $GITHUB_OUTPUT
            else
              echo "DO_RELEASE=false" >> $GITHUB_OUTPUT
            fi

  create_release:
    needs: check_tag_branch
    runs-on: ubuntu-latest
    if: ${{ needs.check_tag_branch.outputs.do_release == 'true' }}  # Skip release if tag is not on master

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0  # Ensure full history is available

      - name: setup python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: cache virtual environment
        uses: actions/cache@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version}}-${{ hashFiles('poetry.lock') }}
          path: .venv

      - name: install dependencies
        run: |
            python3.8 -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install poetry
            poetry config virtualenvs.in-project true
            poetry install --no-root --no-interaction --with=dev
            echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
            echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

      - name: run tests
        run: |
          pytest -k 'not slow' --junit-xml=test-results.xml --cov-report=html:htmlcov
          zip -r htmlcov.zip ./htmlcov/

      - name: build package
        run: poetry build --format=wheel

      - name: Get tag 
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Parse changelog for tag version  # Run script creates new file with parsed changelog
        run: |
            python3 scripts/parse_changelog.py --version $TAG_NAME

      - name: Create release
        id: do_release
        uses: actions/create-release@v1.1.4
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "ts-tvl-${{ env.TAG_NAME }}"
          body_path: CHANGELOG_parsed.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload test report
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.do_release.outputs.upload_url }}
          asset_path: test-results.xml
          asset_name: test-results
          asset_content_type: application/xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload test coverage report
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.do_release.outputs.upload_url }}
          asset_path: htmlcov.zip
          asset_name: test-coverage-report
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.do_release.outputs.upload_url }}
          asset_path: dist/*.whl
          asset_name: ts-tvl-package
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}