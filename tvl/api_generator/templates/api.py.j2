{#- Copyright 2023 TropicSquare -#}
{#- SPDX-License-Identifier: Apache-2.0 -#}
{% extends "header_api.j2" %}

{%- set ENUM_NAME = ENUM_NAME | default("L2Enum") %}
{%- set CLASS_NAME = CLASS_NAME | default("L2API") %}
{%- set API_LEVEL = API_LEVEL | default("\"l2_api\"") %}
{%- set CLASS_PREFIX = CLASS_PREFIX | default("TsL2") %}
{%- set METHOD_PREFIX = METHOD_PREFIX | default("ts_l2_") %}
{%- set INPUT_CLASS = INPUT_CLASS | default("Request") %}
{%- set OUTPUT_CLASS = OUTPUT_CLASS | default("Response") %}
{%- set INPUT_CLASS_PARENT = INPUT_CLASS_PARENT | default("L2Request") %}
{%- set OUTPUT_CLASS_PARENT = OUTPUT_CLASS_PARENT | default("L2Response") %}
{%- set OUTPUT_TYPE_PATTERN = OUTPUT_TYPE_PATTERN | default("Union[%(type)s, List[%(type)s]]") %}
{%- set BUILTIN_IMPORT = BUILTIN_IMPORT | default("from typing import List, Union") %}
{%- set INTERNAL_IMPORT = INTERNAL_IMPORT | default("from tvl.messages.l2_messages import L2Request, L2Response") %}

{%- set BASE_INPUT_CLASS = "API" + INPUT_CLASS_PARENT %}
{%- set BASE_OUTPUT_CLASS = "API" + OUTPUT_CLASS_PARENT %}

{%- macro to_hex(number) -%}
    0x{{-"%02X" | format(number)}}
{%- endmacro -%}

{%- if not format_class_name -%}
    {%- macro format_class_name(name) -%}
        {%- set suffix = "Req" %}
        {%- if name.endswith(suffix) %}{{name[:-(suffix | length)]}}
        {%- else %}{{name}}
        {%- endif %}
    {%- endmacro -%}
{%- endif -%}

{%- if not format_function_name -%}
    {%- macro format_function_name(name) -%}
        {%- set suffix = "_req" %}
        {%- if name.endswith(suffix) %}{{name[:-(suffix | length)]}}
        {%- else %}{{name}}
        {%- endif %}
    {%- endmacro -%}
{%- endif -%}

{%- if not format_id -%}
    {%- macro format_id(name) -%}
        {%- set suffix = "_req" %}
        {%- if name.lower().endswith(suffix) %}{{name[:-(suffix | length)]}}
        {%- else %}{{name}}
        {%- endif %}
    {%- endmacro -%}
{%- endif -%}

{%- macro to_camelcase(string) -%}
    {%- set words = [] -%}
    {%- for word in string.split("_") -%}
        {%- set _tmp = words.append(word.capitalize()) -%}
    {%- endfor -%}
    {{- words | join }}
{%- endmacro -%}


{%- macro format_output_type(output_type) -%}
    {{- OUTPUT_TYPE_PATTERN | format(type=output_type)}}
{%- endmacro -%}


{% block content %}
{%- if BUILTIN_IMPORT %}
{{BUILTIN_IMPORT}}
{%- endif %}

from tvl.messages.datafield import (
    AUTO,
    U8Array,
    U8Scalar,
    U16Array,
    U16Scalar,
    U32Array,
    U32Scalar,
    U64Array,
    U64Scalar,
    datafield,
)
{{INTERNAL_IMPORT}}
from tvl.targets.model.base_model import BaseModel
from tvl.targets.model.meta_model import api
from tvl.typing_utils import HexReprIntEnum

{% for define in defines %}
{{define.name | upper}} = {{define.value}}
{%- if define.description %}
{{['"""', define.description, '"""'] | join | wordwrap(80, wrapstring="\n") | replace("\t", " "*4)}}
{%- endif %}
{%- endfor %}

class {{ENUM_NAME}}(HexReprIntEnum):
{%- for element in enum_class.elements %}
    {{format_id(element.name)}} = {{to_hex(element.message_id)}}
    {%- if element.description %}
    {{['"""', element.description, '"""'] | join | wordwrap(74, wrapstring="\n\t") | replace("\t", " "*4)}}
    {%- endif %}
{%- endfor %}


class {{BASE_INPUT_CLASS}}({{INPUT_CLASS_PARENT}}):
    """API base class for {{INPUT_CLASS_PARENT}}-derived classes"""


class {{BASE_OUTPUT_CLASS}}({{OUTPUT_CLASS_PARENT}}):
    """API base class for {{OUTPUT_CLASS_PARENT}}-derived classes"""

{% for message in messages %}
{%- if message.io_type == "input" %}
    {%- set class_type = INPUT_CLASS %}
    {%- set parent = BASE_INPUT_CLASS %}
    {%- set verify_result_choices = False %}
{%- else %}
    {%- set class_type = OUTPUT_CLASS %}
    {%- set parent = BASE_OUTPUT_CLASS %}
    {%- set verify_result_choices = True %}
{%- endif %}
class {{CLASS_PREFIX}}{{format_class_name(message.name)}}{{class_type}}({{parent}}, id={{ENUM_NAME}}.{{format_id(message.tag)}}):
    {%- set print_placeholder = True %}
    {%- if verify_result_choices and message.result_choices %}
        {%- set print_placeholder = False %}
    class ResultEnum(HexReprIntEnum):
        {%- for choice in message.result_choices %}
        {{choice.name | upper}} = {{to_hex(choice.value)}}
            {%- if choice.description %}
        {{['"""', choice.description, '"""'] | join | wordwrap(66, wrapstring="\n\t\t\t") | replace("\t", " "*4)}}
            {%- endif %}
        {%- endfor %}
    {%- endif %}
    {%- if message.arguments %}
        {%- set print_placeholder = False %}
        {%- for argument in message.arguments %}
            {%- set args = [] %}
            {%- if argument.max_size %}
                {%- do args.append("min_size=%d" | format(argument.min_size)) %}
                {%- do args.append("max_size=%d" | format(argument.max_size)) %}
            {%- elif argument.size %}
                {%- do args.append("size=%d" | format(argument.size)) %}
            {%- endif %}
            {%- if argument.name == "padding" %}
                {%- do args.append("default=AUTO") %}
            {%- endif %}
            {%- if args %}
                {%- set annotations = " = datafield(%s)" | format(args|join(", ")) %}
            {%- else %}
                {%- set annotations = "" %}
            {%- endif %}
            {%- if argument.description %}
                {%- set trailer = "  # %s" | format(argument.description) %}
            {%- else %}
                {%- set trailer = "" %}
            {%- endif %}
    {{argument.name}}: {{argument.dtype}}{{annotations}}{{trailer}}
            {%- if argument.description_long %}
    {{['"""', argument.description_long, '"""'] | join | wordwrap(74, wrapstring="\n\t") | replace("\t", " "*4)}}
            {%- endif %}
            {%- if argument.choices %}
    class {{to_camelcase(argument.name)}}Enum(HexReprIntEnum):
                {%- for choice in argument.choices %}
        {{choice.name | upper}} = {{to_hex(choice.value)}}
                    {%- if choice.description %}
        {{['"""', choice.description, '"""'] | join | wordwrap(70, wrapstring="\n\t\t") | replace("\t", " "*4)}}
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
        {%- endfor %}
    {%- endif %}
    {%- if print_placeholder %}
    pass
    {%- endif %}

{% endfor %}
class {{CLASS_NAME}}(BaseModel):
    """
    Implementation of the TASSIC functional model.

    When adding a new {{INPUT_CLASS | lower}} processing method, decorate it with the
    function `api` as shown below. Do not forget the type hint.

    ```python
    @api({{API_LEVEL}})
    def handler(self, request: <in type>) -> {{format_output_type("<out type>")}}:
        # Processing
    ```
    """

    parse_{{INPUT_CLASS | lower}}_fn = {{BASE_INPUT_CLASS}}.instantiate_subclass
    """Retrieve a {{BASE_INPUT_CLASS}} from raw data"""
{% for function in api_class.functions %}
    {%- set input_type = [CLASS_PREFIX, format_class_name(function.input), INPUT_CLASS] | join %}
    @api({{API_LEVEL}})
    def {{METHOD_PREFIX}}{{format_function_name(function.name)}}(
        self,
        {{INPUT_CLASS | lower}}: {{input_type}}
    ) -> {{format_output_type(OUTPUT_CLASS_PARENT)}}:
        {%- if function.description %}
        {{['"""', function.description, '"""'] | join | wordwrap(70, wrapstring="\n\t\t")}}
        {%- endif %}
        raise NotImplementedError("TODO")
{% endfor %}
{%- endblock content %}
