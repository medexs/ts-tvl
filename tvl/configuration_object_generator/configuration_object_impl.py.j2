{#- Copyright 2023 TropicSquare -#}
{#- SPDX-License-Identifier: Apache-2.0 -#}
# GENERATED ON {{header.date}}
# BY {{header.tool}} VERSION {{header.version}}
# INPUT FILE: {{header.hash}}
#
# Copyright 2023 TropicSquare
# SPDX-License-Identifier: Apache-2.0

{% macro to_camelcase(string) -%}
    {%- set words = [] -%}
    {%- for word in string.split("_") -%}
        {%- set _tmp = words.append(word.capitalize()) -%}
    {%- endfor -%}
    {{- words | join }}
{%- endmacro -%}

{%- set ENUM_CLASS = "ConfigObjectRegisterAddressEnum" -%}

from enum import IntEnum
from typing import Optional

from pydantic import StrictInt

from tvl.targets.model.internal.configuration_object import AccessType
from tvl.targets.model.internal.configuration_object import (
    ConfigObjectField,
    ConfigObjectRegister,
    ConfigurationObject,
    ConfigurationObjectModel,
)

{% for register_name, register in context.items() %}
class {{to_camelcase(register_name)}}(ConfigObjectRegister):
    {%- for field_name, field in register.fields.items() %}
    {{field_name | lower}} = ConfigObjectField({{field.lowidx}}, {{field.width}}, AccessType.{{field.access}})
    {{['"""', field.description, '"""'] | join | wordwrap(74, wrapstring="\n\t") | replace("\t", " "*4)}}
    {%- endfor %}

{% endfor %}
class {{ENUM_CLASS}}(IntEnum):
{%- for register_name, register in context.items() %}
    {{register_name | upper}} = {{"0x%02X" | format(register.baseaddr)}}
{%- endfor %}


class ConfigurationObjectImpl(ConfigurationObject):
    def __init__(self, **kwargs: int) -> None:
{%- for register_name, register in context.items() %}
        self.{{register_name | lower}} = {{to_camelcase(register_name)}}({{ENUM_CLASS}}.{{register_name | upper}}, {{"0x%08X" | format(register.reset)}})
{%- endfor %}
        super().__init__(**kwargs)


class ConfigurationObjectImplModel(ConfigurationObjectModel):
{%- for register_name, register in context.items() %}
    {{register_name | lower }}: Optional[StrictInt]
{%- endfor %}

